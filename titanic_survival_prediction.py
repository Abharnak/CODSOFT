# -*- coding: utf-8 -*-
"""Titanic Survival Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12oW90cBsfvaEMxmvmDe0vVvvwpJiXnTy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Data collection & Processing"""

from google.colab import files
uploaded = files.upload()

df =pd.read_csv('Titanic-Dataset.csv', index_col=None)
print(df.columns)

df.head()

# Display information about the columns and their data types
print("\nInformation about the dataset:")
print(df.info())

# Summary statistics for numerical columns
print("\nSummary statistics for numerical columns:")
print(df.describe())

# Check for any missing values in the dataset
print("\nMissing values in the dataset:")
print(df.isnull().sum())

df.duplicated().sum()

"""Handling Missing Values"""

# Handle missing values and preprocessing
mean_age = df['Age'].mean()
df['Age'].fillna(mean_age, inplace=True)

# Handle missing values in the 'Embarked' column by imputing the most frequent value
most_frequent_embarked = df['Embarked'].mode()[0]
df['Embarked'].fillna(most_frequent_embarked, inplace=True)

# Drop the 'Cabin' column since it has too many missing values
df.drop('Cabin', axis=1, inplace=True)

print(df.isnull().sum())

"""Data Visualization"""

sns.set()

df['Survived'].value_counts()

df.head()

x = ['Survived','Non survied']
y = [342,549]

plt.ylabel("Number of Passengers")
plt.bar(x,y)
plt.show()

y = np.array([342,549])
explode = (0.1, 0)
plt.pie(y,labels=x,explode=explode,autopct='%1.1f%%')
plt.legend()
plt.show()

df['Sex'].value_counts()

sns.countplot(x='Sex',data=df)

sns.countplot(x='Sex',hue='Survived',data=df)

sns.countplot(x='Pclass',data=df)

sns.countplot(x='Pclass',hue='Survived',data=df)

heatmap = sns.heatmap(df.corr()[['Survived']].sort_values(by='Survived', ascending=False), vmin=-1, vmax=1, annot=True, cmap='BrBG')
heatmap.set_title('Features Correlating with Survived', fontdict={'fontsize':18}, pad=16);

"""Encoding categorical Values"""

df['Embarked'].value_counts()

# Transform to categorical values
df.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

df.head()

"""Separating features & target"""

X = df.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = df['Survived']

"""Train test split"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

X_train.head()

"""Model Training"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, Y_train)

"""Model Evaluation"""

from sklearn.metrics import accuracy_score
X_train_prediction = model.predict(X_train)

"""Accuracy"""

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)

"""Testing with random values"""

input_data = [1,1,35,0,0,8.05,0]
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)
if prediction[0]==0:
    print("Dead")
if prediction[0]==1:
    print("Alive")